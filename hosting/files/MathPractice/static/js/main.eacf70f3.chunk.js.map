{"version":3,"sources":["components/ChartSection.js","components/PieChart.js","components/CardSection.js","components/NavBar.js","App.js","reportWebVitals.js","index.js"],"names":["ChartSection","useContext","CardContext","passed","failed","total","width","height","chartType","loader","data","options","chart","title","subtitle","colors","PieChartSection","is3D","CardSection","buttonName","useState","stat","setStat","textInput","useRef","card","cardTitle","question","resultRef","separatorRef","result","undefined","afterText","buildQuestion","operand1","operand2","answer","text","Container","fluid","Stack","direction","gap","Card","ref","style","margin","bg","toLowerCase","Body","Header","color","Title","className","display","Badge","styling","badge","Form","Text","Control","type","placeholder","Button","marginTop","onClick","event","Number","current","value","textContent","Provider","getRndInteger","min","max","Math","floor","random","mainContainer","flex","flexDirection","justifyContent","alignItems","padding","subContainer","contextButtonContainer","borderRadius","contextButtonSubContainer","marginBottom","textStyle","fontSize","numbersView","contextButtonView","borderWidth","borderColor","createContext","NavBar","Navbar","variant","Brand","href","Nav","Link","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eacf70f3.chunk.js","sourcesContent":["import Chart from \"react-google-charts\";\nimport { Container } from \"react-bootstrap\";\nimport {useContext} from 'react'\nimport { CardContext } from './CardSection'\n\nexport const ChartSection = () => {\n\n    const {passed, failed, total} = useContext(CardContext)\n    \n    const shouldDisplay = () => {\n        const jsx = total > 0 ? (\n            <Chart\n                width={'300px'}\n                height={'200px'}\n                chartType=\"Bar\"\n                loader={<div>Loading Chart</div>}\n                data={[\n                    ['Multiplication', 'Passed', 'Failed', 'Total'],\n                    ['2021', passed, failed, total]\n                ]}\n                options={{\n                    chart: {\n                        title: 'Result',\n                        subtitle: 'Multiplication Result',\n                    },\n                    colors: ['green', 'red', 'orange'],\n                }}\n            />\n        ) : (<></>);\n        return jsx;\n    }\n    return shouldDisplay()\n}","import Chart from 'react-google-charts'\nimport {useContext} from 'react'\nimport { CardContext } from './CardSection';\n\nexport const PieChartSection = () => {\n    \n    const { passed, failed } = useContext(CardContext)\n    \n    const shouldDisplay = () => {\n        const jsx = passed || failed ? (\n            <Chart\n                width={'400px'}\n                height={'250px'}\n                chartType=\"PieChart\"\n                loader={<div>Loading Chart</div>}\n                data={[\n                    ['Task', 'Hours per Day'],\n                    ['Failed', failed],\n                    ['Passed', passed],\n                ]}\n                options={{\n                    title: 'Result',\n                    colors: ['red', 'green'],\n                    is3D: true,\n                }}\n\n            />) : (<></>);\n        return jsx;\n    }\n\n    return shouldDisplay()\n}","import React, { useState, useRef, createContext } from 'react';\nimport { MDBInput } from \"mdbreact\";\nimport { Container } from 'react-bootstrap'\nimport Badge from 'react-bootstrap/Badge'\nimport Button from 'react-bootstrap/Button'\nimport Card from 'react-bootstrap/Card'\nimport Form from 'react-bootstrap/Form'\nimport Stack from 'react-bootstrap/Stack'\nimport FormControl from 'react-bootstrap/FormControl'\nimport { ChartSection } from './ChartSection'\nimport { PieChartSection } from './PieChart'\n\nexport const CardSection = ({ title, buttonName }) => {\n    const [stat, setStat] = useState([0, 0, 0])\n\n    const textInput = useRef(null);\n    const card = useRef(null);\n    const cardTitle = useRef(null);\n    const question = useRef(null);\n    const resultRef = useRef(null);\n    const separatorRef = useRef(null);\n\n    let result = undefined;\n    let background = 'dark';\n    let afterText = undefined;\n\n    let failed = stat[0],\n        passed = stat[1],\n        total = stat[2];\n\n    const [operand1, operand2, answer] = buildQuestion();\n\n    const handleSubmit = (event) => {\n        result = (Number(textInput.current.value))\n        textInput.current.value = '';\n        if (result === answer) {\n            passed++;\n            total++;\n            cardTitle.current.textContent = undefined;\n            resultRef.current.textContent = undefined;\n            separatorRef.current.style.display= 'none'\n        } else {\n            failed++;\n            total++;\n            afterText = `${text} = ${answer}`\n            cardTitle.current.textContent = afterText;\n            resultRef.current.textContent = `Your answer ${result}`\n            separatorRef.current.style.display= 'block'\n        }\n        //background = result === answer ? 'Success' : 'Danger';\n        //card.current.className=`card bg-${background.toLowerCase()}`;\n        setStat([failed, passed, total])\n    }\n\n    let text = `${operand1} * ${operand2}`;\n\n    return (\n        <Container fluid>\n            <Stack direction=\"horizontal\" gap={5}>\n                <Card ref={card} style={{ width: '25rem', margin: '15px' }} bg={background.toLowerCase()}>\n                    <Card.Body>\n                        <Card.Header style={{ color: 'white' }}>\n                            <h3>{title}</h3>\n                        </Card.Header>\n\n                        <Stack direction=\"horizontal\" gap={5}>\n                            <Card.Title ref={cardTitle} style={{ color: 'yellow' }}>\n                                {afterText}</Card.Title>\n                            <div ref={separatorRef} className=\"vr\" style={{ color: 'white', display: 'none' }} />\n                            <Card.Title ref={resultRef} style={{ color: 'red' }}>{result}</Card.Title>\n                        </Stack>\n\n                        <Badge style={styling.badge} bg=\"danger\"> {failed}</Badge>\n                        <Badge style={styling.badge} bg=\"success\">{passed}</Badge>\n                        <Badge style={styling.badge} bg=\"warning\">{total}</Badge>\n                        <Form.Text ref={question} style={{ color: 'white' }}>\n                            <h3>{text}</h3>\n                        </Form.Text>\n                        <Form.Control ref={textInput} type=\"text\" placeholder=\"Answer\" />\n                        <Button style={{ marginTop: 10 }} onClick={handleSubmit}>{buttonName}</Button>\n                    </Card.Body>\n                </Card>\n                <CardContext.Provider value={{ passed, failed, total }} >\n                    <ChartSection />\n                    <PieChartSection />\n                </CardContext.Provider>\n            </Stack>\n        </Container>\n    )\n}\n\nconst buildQuestion = () => {\n    const operand1 = getRndInteger(12, 19)\n    const operand2 = getRndInteger(12, 99)\n    const answer = operand1 * operand2\n    return [operand1, operand2, answer];\n}\n\nconst getRndInteger = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nconst styling = {\n    mainContainer: {\n        flex: 1,\n        flexDirection: 'row',\n        justifyContent: 'flex-end',\n        alignItems: 'center'\n\n    },\n    badge: {\n        flex: 1,\n        flexDirection: 'row',\n        justifyContent: 'flex-start',\n        alignItems: 'flex-end',\n        padding: 5,\n        margin: 5\n    },\n    subContainer: {\n        padding: 5,\n        flex: 1.5,\n        justifyContent: 'flex-end',\n        alignItems: 'center'\n    },\n    contextButtonContainer: {\n        flex: 1,\n        justifyContent: 'flex-end',\n        alignItems: 'center',\n        borderRadius: 3\n    },\n    contextButtonSubContainer: {\n        flex: 1,\n        flexDirection: 'row',\n        alignItems: 'flex-end',\n        marginBottom: 40\n    },\n    textStyle: {\n        fontSize: 22,\n        padding: 20,\n        color: 'blue',\n        justifyContent: 'center'\n    },\n    numbersView: {\n        flex: 1,\n        padding: 5,\n        flexDirection: 'row',\n        alignItems: 'flex-end',\n        marginBottom: 40\n    },\n    contextButtonView: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center',\n        borderWidth: 1,\n        borderRadius: 8,\n        borderColor: 'blue'\n    }\n};\n\nexport const CardContext = createContext(CardSection);\n","import Navbar from 'react-bootstrap/Navbar';\nimport Container from 'react-bootstrap/Container';\nimport Nav from 'react-bootstrap/Nav';\n\n\nexport const NavBar = () => {\n    return (\n        <Navbar bg=\"dark\" variant=\"dark\">\n            <Container>\n                <Navbar.Brand href=\"#home\">Shresth's </Navbar.Brand>\n                <Nav className=\"me-auto\">\n                    <Nav.Link href=\"#home\">Math</Nav.Link>\n                    <Nav.Link href=\"#multiplication\">Multiplication</Nav.Link>\n                    <Nav.Link href=\"#addition\">Addition</Nav.Link>\n                </Nav>\n            </Container>\n        </Navbar>\n    )\n}","import { useState, useRef, useEffect } from \"react\";\nimport { Environment } from './components/Environment';\nimport { Content } from './components/Content';\nimport { CardSection } from './components/CardSection'\nimport { NavBar } from './components/NavBar'\nimport { Result } from './components/Result'\n\nfunction App() {\n\n  return (\n    <>\n      <NavBar />\n      <CardSection title=\"Multiply\" buttonName=\"Submit\" />\n      \n    </>\n  );\n}\n\nexport default App;\n\n//<Dropdown id=\"Dropdown\" value={environment} update={setEnvironment} options={['Chandan', 'Bhardwaj', 'Javascript']} />","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}